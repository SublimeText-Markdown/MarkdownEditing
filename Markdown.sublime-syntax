%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Markdown GFM
file_extensions:
  - md
  - mdown
  - markdown
  - markdn
scope: text.html.markdown.gfm
contexts:
  main:
    - match: (?=(?<!\s)---(\s*coffee|\s*json)?\n$)
      push: front-matter
    - match: ""
      push: body
  front-matter:
    - match: (?<!\s)---\n$
      push:
        - meta_scope: markup.raw.yaml.front-matter
        - meta_content_scope: source.yaml
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.yaml
    - match: (?<!\s)---\s*coffee\n$
      push:
        - meta_scope: markup.raw.coffee.front-matter
        - meta_content_scope: source.coffee
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.coffee
    - match: (?<!\s)---\s*json\n$
      push:
        - meta_scope: markup.raw.json.front-matter
        - meta_content_scope: source.json
        - match: ^(---|\.\.\.)\s
          pop: true
        - include: scope:source.json
    - match: ""
      pop: true
      push: body
  body:
    - match: |-
        (?x)^
        (?= [ ]{,3}>
        | ([ ]{4}|\t)(?!$)
        | [#]{1,6}\s*+
        | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
        )
      comment: |
        We could also use an empty end match and set
                        applyEndPatternLast, but then we must be sure that the begin
                        pattern will only match stuff matched by the sub-patterns.
      push:
        - meta_scope: meta.block-level.markdown
        - match: |-
            (?x)^
            (?! [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          pop: true
        - include: block_quote
        - include: block_raw
        - include: heading
        - include: separator
    - match: '^[ ]{0,3}([*+-])(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.unnumbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: fenced-code-blocks
        - include: block_quote
        - include: list-paragraph
    - match: '^[ ]{0,3}([0-9]+\.)(?=\s)'
      captures:
        1: punctuation.definition.list_item.markdown
      push:
        - meta_scope: markup.list.numbered.markdown
        - match: ^(?=\S)
          captures:
            1: punctuation.definition.list_item.markdown
          pop: true
        - include: fenced-code-blocks
        - include: block_quote
        - include: list-paragraph
    - include: fenced-code-blocks
    - match: '<!---'
      comment: Github style comment
      push:
        - meta_scope: comment.block.html
        - match: ->
          pop: true
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)(?!.*?</\1>)'
      comment: Markdown formatting is disabled inside block-level tags.
      push:
        - meta_scope: meta.disable-markdown
        - match: (?<=^</\1>$\n)
          pop: true
        - include: tag-kbd
        - include: scope:text.html.basic
    - match: '^(?=<(p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|noscript|form|fieldset|iframe|math|ins|del)\b[^>]*>)'
      comment: Same rule but for one line disables.
      push:
        - meta_scope: meta.disable-markdown
        - match: $\n?
          pop: true
        - include: tag-kbd
        - include: scope:text.html.basic
    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(\^\d+?)(\])(:)   # Reference name
          [ \t]*          # Optional whitespace
          (.+?)     # The footnote
          [ \t]*            # Optional whitespace
          $
        )
      scope: meta.link.reference.footnote.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
        5: meta.paragraph.markdown
    - match: |-
        (?x:
          \s*           # Leading whitespace
          (\[)(.+?)(\])(:)    # Reference name
          [ \t]*          # Optional whitespace
          (<?)(\S+?)(>?)      # The url
          [ \t]*          # Optional whitespace
          (?:
              ((\().+?(\)))   # Match title in quotes…
            | ((").+?("))   # or in parens.
          )?            # Title is optional
          [ \t]*            # Optional whitespace
          $
        )
      scope: meta.link.reference.def.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
        4: punctuation.separator.key-value.markdown
        5: punctuation.definition.link.markdown
        6: markup.underline.link.markdown
        7: punctuation.definition.link.markdown
        8: string.other.link.description.title.markdown
        9: punctuation.definition.string.begin.markdown
        10: punctuation.definition.string.end.markdown
        11: string.other.link.description.title.markdown
        12: punctuation.definition.string.begin.markdown
        13: punctuation.definition.string.end.markdown
    - match: '^(?=\S)(?![=-]{3,}(?=$))'
      push:
        - meta_scope: meta.paragraph.markdown
        - match: '^(?:\s*$|(?=[ ]{,3}>)|(?=```|~~~))|(?=[ \t]*\n)(?<=^===|^====|=====|^---|^----|-----)[ \t]*\n|(?=^#)'
          pop: true
        - include: inline
        - include: scope:text.html.basic
        - match: '^(={3,})(?=[ \t]*$)'
          scope: markup.heading.1.markdown
          captures:
            1: punctuation.definition.heading.markdown
        - match: '^(-{3,})(?=[ \t]*$)'
          scope: markup.heading.2.markdown
          captures:
            1: punctuation.definition.heading.markdown
  ampersand:
    - match: "&(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)"
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-ampersand.markdown
  block_quote:
    - match: '\G[ ]{,3}(>)[ ]?'
      comment: |
        We terminate the block quote when seeing an empty line, a
                        separator, a numbered or un-numbered list-item
                        or a line with leading > characters. The latter is
                        to “reset” the quote level for quoted lines.
      captures:
        1: punctuation.definition.blockquote.markdown
      push:
        - meta_scope: markup.quote.markdown
        - match: |-
            (?x)^
            (?= \s*$
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            | [ ]{,3}([*+-])(?=\s)
            | [ ]{,3}([0-9]+\.)(?=\s)
            | [ ]{,3}>
            )
          pop: true
        - match: |-
            (?x)\G
            [ ]*
            (?= >
            )
          push:
            - match: ^
              pop: true
            - include: block_quote
        - match: |-
            (?x)\G
            (?= ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - include: block_raw
            - include: heading
            - include: separator
            - match: ^
              pop: true
        - match: |-
            (?x)\G
            (?! $
            | [ ]{,3}>
            | ([ ]{4}|\t)
            | [#]{1,6}\s*+
            | [ ]{,3}(?<marker>[-*_])([ ]{,2}\k<marker>){2,}[ \t]*+$
            )
          push:
            - match: $|(?<=\n)
              pop: true
            - include: inline
            - include: scope:text.html.basic
  block_raw:
    - match: '\G([ ]{4}|\t).*$\n?'
      scope: markup.raw.block.markdown
  bold:
    - match: |-
        (?x)
          (?<!\w)(\*\*|__)(?=\S)                # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold.markdown
        - match: (?<=\S)(\1)
          captures:
            1: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: italic
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: link-wiki
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  bold_italic:
    - match: |-
        (?x)
          (?<!\w)(\*|_)(?=\1\1)(\1\1)(?=\S)               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1{3}(?!\1)).           # Everything besides
                                # style closer
            )++
            (?<=\S)\1{3}(?!\1)                # Close
          )
      captures:
        1: punctuation.definition.bold.markdown
        2: punctuation.definition.bold.markdown
      push:
        - meta_scope: markup.bold_italic.markdown
        - match: '(?<=\S)(\1{3})(?!\1)'
          captures:
            1: punctuation.definition.bold.markdown
            2: punctuation.definition.bold.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: italic
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: link-wiki
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  bracket:
    - match: '<(?![a-z/?\$!])'
      comment: |
        Markdown will convert this for us. We match it so that the
                        HTML grammar will not mark it up as invalid.
      scope: meta.other.valid-bracket.markdown
  escape:
    - match: '\\[-`*_#+.!(){}\[\]\\>]'
      scope: constant.character.escape.markdown
  fenced-c:
    - match: '^(\s*[`~]{3,})\s*(c)\s*$'
      embed: scope:source.c
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-csharp:
    - match: '^(\s*[`~]{3,})\s*(c(?:s|sharp|#))\s*$'
      embed: scope:source.cs
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-c++:
    - match: '^(\s*[`~]{3,})\s*(c\+\+|cpp)\s*$'
      embed: scope:source.c++
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-clojure:
    - match: '^(\s*[`~]{3,})\s*(clojure)\s*$'
      embed: scope:source.clojure
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-go:
    - match: '^(\s*[`~]{3,})\s*(go|golang)\s*$'
      embed: scope:source.go
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-kotlin:
    - match: '^(\s*[`~]{3,})\s*(kt|kotlin)\s*$'
      embed: scope:source.Kotlin
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-code-blocks:
    - include: fenced-html
    - include: fenced-xml
    - include: fenced-diff
    - include: fenced-perl
    - include: fenced-php
    - include: fenced-css
    - include: fenced-less
    - include: fenced-java
    - include: fenced-c
    - include: fenced-c++
    - include: fenced-csharp
    - include: fenced-yaml
    - include: fenced-sql
    - include: fenced-shell
    - include: fenced-sass
    - include: fenced-scss
    - include: fenced-scala
    - include: fenced-obj-c
    - include: fenced-coffee
    - include: fenced-js
    - include: fenced-json
    - include: fenced-ts
    - include: fenced-tsx
    - include: fenced-ruby
    - include: fenced-python
    - include: fenced-lisp
    - include: fenced-lua
    - include: fenced-scheme
    - include: fenced-swift
    - include: fenced-clojure
    - include: fenced-go
    - include: fenced-kotlin
    - include: fenced-ocaml
    - include: fenced-reason
    - include: fenced-haskell
    - include: fenced-rust
    - include: fenced-ahk
    - include: fenced-r
    - include: fenced-stata
    - include: fenced-undefined
  fenced-coffee:
    - match: '^(\s*[`~]{3,})\s*(coffee|cjsx)\s*$'
      embed: scope:source.coffee
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-css:
    - match: '^(\s*[`~]{3,})\s*(css)\s*$'
      embed: scope:source.css
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-diff:
    - match: '^(\s*[`~]{3,})\s*(diff|patch)\s*$'
      embed: scope:source.diff
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-html:
    - match: '^(\s*[`~]{3,})\s*(html|html5)\s*$'
      embed: scope:text.html.basic
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-java:
    - match: '^(\s*[`~]{3,})\s*(java)\s*$'
      embed: scope:source.java
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-js:
    - match: '^(\s*[`~]{3,})\s*(js|jsx|javascript)\s*$'
      embed: scope:source.js
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-json:
    - match: '^(\s*[`~]{3,})\s*(json)\s*$'
      embed: scope:source.json
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-less:
    - match: '^(\s*[`~]{3,})\s*(less)\s*$'
      embed: scope:source.less
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-lisp:
    - match: '^(\s*[`~]{3,})\s*(lisp)\s*$'
      embed: scope:source.lisp
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-lua:
    - match: '^(\s*[`~]{3,})\s*(lua)\s*$'
      embed: scope:source.lua
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-ocaml:
    - match: '^(\s*[`~]{3,})\s*(ocaml)\s*$'
      embed: scope:source.ocaml
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-obj-c:
    - match: '^(\s*[`~]{3,})\s*(obj(ective-)?c)\s*$'
      embed: scope:source.objc
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-perl:
    - match: '^(\s*[`~]{3,})\s*(perl)\s*$'
      embed: scope:source.perl
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-php:
    - match: '^(\s*[`~]{3,})\s*(php)\s*$'
      embed: scope:source.php
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-python:
    - match: '^(\s*[`~]{3,})\s*(py|python)\s*$'
      embed: scope:source.python
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-reason:
    - match: '^(\s*[`~]{3,})\s*(re|reason)\s*$'
      embed: scope:source.reason
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-ruby:
    - match: '^(\s*[`~]{3,})\s*(ruby)\s*$'
      embed: scope:source.ruby
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-sass:
    - match: '^(\s*[`~]{3,})\s*(sass)\s*$'
      embed: scope:source.sass
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-scala:
    - match: '^(\s*[`~]{3,})\s*(scala)\s*$'
      embed: scope:source.scala
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-scheme:
    - match: '^(\s*[`~]{3,})\s*(scheme)\s*$'
      embed: scope:source.scheme
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-scss:
    - match: '^(\s*[`~]{3,})\s*(scss)\s*$'
      embed: scope:source.scss
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-shell:
    - match: '^(\s*[`~]{3,})\s*(sh|shell|bash)\s*$'
      embed: scope:source.shell
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-sql:
    - match: '^(\s*[`~]{3,})\s*(sql)\s*$'
      embed: scope:source.sql
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-swift:
    - match: '^(\s*[`~]{3,})\s*(swift)\s*$'
      embed: scope:source.swift
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-ts:
    - match: '^(\s*[`~]{3,})\s*(ts|typescript)\s*$'
      embed: scope:source.ts
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-tsx:
    - match: '^(\s*[`~]{3,})\s*(tsx)\s*$'
      embed: scope:source.tsx
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-haskell:
    - match: '^(\s*[`~]{3,})\s*(haskell|hs)\s*$'
      embed: scope:source.haskell
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-rust:
    - match: '^(\s*[`~]{3,})\s*(rust)\s*$'
      embed: scope:source.rust
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-stata:
    - match: '^(\s*[`~]{3,})\s*(s|stata|{s}|{s(\s|\,).*}|{stata}|{stata(\s|\,).*})\s*$'
      embed: scope:source.stata
  fenced-ahk:
    - match: '^(\s*[`~]{3,})\s*(ahk)\s*$'
      embed: scope:source.ahk
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-undefined:
    - match: '^(\s*[`~]{3,}).*$'
      push:
        - meta_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
        - match: ^(\1)\n
          pop: true
  fenced-xml:
    - match: '^(\s*[`~]{3,})\s*(xml)\s*$'
      embed: scope:text.xml
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-yaml:
    - match: '^(\s*[`~]{3,})\s*(yaml)\s*$'
      embed: scope:source.yaml
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  fenced-r:
    - match: '^(\s*[`~]{3,})\s*(R|r|\{r[a-zA-Z0-9.,-="\s]*\})\s*$'
      embed: scope:source.r
      embed_scope: markup.raw.block.markdown markup.raw.block.fenced.markdown
      escape: ^(\1)\n
  heading:
    - match: '\G(#{1,6})(?!#)\s*(?=\S)'
      captures:
        1: punctuation.definition.heading.markdown
      push:
        - meta_scope: markup.heading.markdown
        - meta_content_scope: entity.name.section.markdown
        - match: '[ \t]*(#*)$'
          captures:
            1: punctuation.definition.heading.markdown
          pop: true
        - include: inline
  image-inline:
    - match: |-
        (?x:
                \!              # Images start with !
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(\S+?)(>?)      # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.image.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.image.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.markdown
        12: punctuation.definition.string.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.markdown
        15: punctuation.definition.string.markdown
        16: punctuation.definition.metadata.markdown
  image-ref:
    - match: '\!(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)(.*?)(\])'
      scope: meta.image.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.description.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  inline:
    - include: escape
    - include: ampersand
    - include: bracket
    - include: raw
    - include: bold_italic
    - include: bold
    - include: italic
    - include: strikethrough
    - include: line-break
    - include: image-inline
    - include: link-inline
    - include: link-inet
    - include: link-email
    - include: link-wiki
    - include: image-ref
    - include: link-ref
    - include: link-ref-literal
    - include: link-footnote
    - include: tag-kbd
    - include: latex-inline
    - include: scope:text.html.basic
  italic:
    - match: |-
        (?x)
          (?<!\w)(\*|_)(?=\S)               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | \1\1                # Must be bold closer
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
            (?<=\S)\1               # Close
          )
      captures:
        1: punctuation.definition.italic.markdown
      push:
        - meta_scope: markup.italic.markdown
        - match: (?<=\S)(\1)((?!\1)|(?=\1\1))
          captures:
            1: punctuation.definition.italic.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: bold
        - include: strikethrough
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: link-wiki
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  line-break:
    - match: " {2,}$"
      scope: meta.dummy.line-break
  link-email:
    - match: '(<)?((?:mailto:)?[-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(>)?'
      scope: meta.link.email.lt-gt.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        4: punctuation.definition.link.markdown
  link-wiki:
    - match: '(\[\[)([a-zA-Z0-9.]+)(\]\])'
      scope: meta.link.wiki.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.string.end.markdown
  link-footnote:
    - match: '(\[)(\^[^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.constant.begin.markdown
        2: constant.other.reference.link.markdown
        3: punctuation.definition.constant.end.markdown
  link-inet:
    - match: '(<)?(\b(?:https?|ftp|file|git):///?[^\s()<>\[\]]+)(>)?'
      scope: meta.link.inet.markdown
      captures:
        1: punctuation.definition.link.markdown
        2: markup.underline.link.markdown
        3: punctuation.definition.link.markdown
  link-inline:
    - match: |-
        (?x:
                (\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])
                              # Match the link text.
                ([ ])?            # Space not allowed
                (\()            # Opening paren for url
                  (<?)(.*?)(>?)     # The url
                  [ \t]*          # Optional whitespace
                  (?:
                      ((\().+?(\)))   # Match title in parens…
                    | ((").+?("))   # or in quotes.
                  )?            # Title is optional
                  \s*           # Optional whitespace
                (\))
               )
      scope: meta.link.inline.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: invalid.illegal.whitespace.markdown
        6: punctuation.definition.metadata.markdown
        7: punctuation.definition.link.markdown
        8: markup.underline.link.markdown
        9: punctuation.definition.link.markdown
        10: string.other.link.description.title.markdown
        11: punctuation.definition.string.begin.markdown
        12: punctuation.definition.string.end.markdown
        13: string.other.link.description.title.markdown
        14: punctuation.definition.string.begin.markdown
        15: punctuation.definition.string.end.markdown
        16: punctuation.definition.metadata.markdown
  link-ref:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(\[)([^\]]*+)(\])'
      scope: meta.link.reference.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: constant.other.reference.link.markdown
        7: punctuation.definition.constant.end.markdown
  link-ref-literal:
    - match: '(\[)((?<square>[^\[\]\\]|\\.|\[\g<square>*+\])*+)(\])[ ]?(?:(\[)(\]))?'
      scope: meta.link.reference.literal.markdown
      captures:
        1: punctuation.definition.string.begin.markdown
        2: string.other.link.title.markdown
        4: punctuation.definition.string.end.markdown
        5: punctuation.definition.constant.begin.markdown
        6: punctuation.definition.constant.end.markdown
  list-paragraph:
    - match: \G\s+(?=\S)
      push:
        - meta_scope: meta.paragraph.list.markdown
        - match: ^\s*$
          pop: true
        - include: inline
        - match: '\G\s*([*\-+]|[0-9]+\.)\s+'
          captures:
            1: punctuation.definition.list_item.markdown
        - include: scope:text.html.basic
        - include: fenced-code-blocks
        - include: block_quote
  raw:
    - include: latex-display
    - match: '(`+)((?:[^`]|(?!(?<!`)\1(?!`))`)*+)(\1)'
      scope: markup.raw.inline.markdown
      captures:
        1: punctuation.definition.raw.markdown
        2: markup.raw.inline.content.markdown
        3: punctuation.definition.raw.markdown
  separator:
    - match: '\G[ ]{,3}([-*_])([ ]{,2}\1){2,}[ \t]*$\n?'
      scope: meta.separator.markdown
  strikethrough:
    - match: |-
        (?x)
          (?<!\w)(~~)(?=[^\s~])               # Open
          (?=
            (
                <[^>]*+>              # HTML tags
              | (?<raw>`+)([^`]|(?!(?<!`)\k<raw>(?!`))`)*+\k<raw>
                                # Raw
              | \\[\\`*_{}\[\]()#.!+\->]?+      # Escapes
              | \[
              (
                      (?<square>          # Named group
                    [^\[\]\\]       # Match most chars
                        | \\.           # Escaped chars
                        | \[ \g<square>*+ \]    # Nested brackets
                      )*+
                \]
                (
                  (             # Reference Link
                    [ ]?          # Optional space
                    \[[^\]]*+\]       # Ref name
                  )
                  | (             # Inline Link
                    \(            # Opening paren
                      [ \t]*+       # Optional whtiespace
                      <?(.*?)>?     # URL
                      [ \t]*+       # Optional whtiespace
                      (         # Optional Title
                        (?<title>['"])
                        (.*?)
                        \k<title>
                      )?
                    \)
                  )
                )
              )
              | (?!(?<=\S)\1).            # Everything besides
                                # style closer
            )++
          )
      captures:
        1: punctuation.definition.strikethrough.markdown
      push:
        - meta_scope: markup.strikethrough.markdown
        - match: (?<=\S)(\1)(?!\w)
          captures:
            1: punctuation.definition.strikethrough.markdown
          pop: true
        - match: "(?=<[^>]*?>)"
          push:
            - include: tag-kbd
            - include: scope:text.html.basic
            - match: (?<=>)
              pop: true
        - include: escape
        - include: ampersand
        - include: bracket
        - include: raw
        - include: bold_italic
        - include: bold
        - include: italic
        - include: image-inline
        - include: link-inline
        - include: link-inet
        - include: link-email
        - include: image-ref
        - include: link-ref
        - include: link-ref-literal
        - include: link-footnote
  tag-kbd:
    - match: "((<)(kbd)(>))([^<]+)((</)(kbd)(>))"
      scope: markup.kbd.markdown
      captures:
        1: meta.tag.other.html
        2: punctuation.definition.tag.begin.html
        3: entity.name.tag.other.html
        4: punctuation.definition.tag.end.html
        5: markup.kbd.content.markdown
        6: meta.tag.other.html
        7: punctuation.definition.tag.begin.html
        8: entity.name.tag.other.html
        9: punctuation.definition.tag.end.html

  latex-inline:
    - match: \\\$
    - match: |-
        (?x)
        (\$)(?=\S)
        (?=
          (?:
            \\\\
            |\\\$
            |[^\$]
          )*?
          \S\$(?:[^a-zA-Z0-9]|$)
        )
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      push:
        - meta_scope: text.tex.latex meta.environment.math.latex
        - include: scope:text.tex.latex#macros
        - include: scope:text.tex.latex#math-content
        - match: \$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true

  latex-display:
    - match: \$\$
      scope: string.other.math.latex punctuation.definition.string.begin.latex
      push:
        - meta_scope: text.tex.latex meta.environment.math.latex
        - include: scope:text.tex.latex#macros
        - include: scope:text.tex.latex#math-content
        - match: \$\$
          scope: string.other.math.latex punctuation.definition.string.end.latex
          pop: true
